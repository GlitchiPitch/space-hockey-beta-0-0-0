local Logger = {}
Logger.__index = Logger

-- –£—Ä–æ–≤–Ω–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
Logger.Levels = {
	DEBUG = 1,
	INFO = 2,
	WARN = 3,
	ERROR = 4,
	FATAL = 5,
	NONE = 6,
}

-- –°—Ç–∏–ª–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π (–∏—Å–ø–æ–ª—å–∑—É–µ–º message templates)
local MessageTemplates = {
	[Logger.Levels.DEBUG] = {
		Prefix = "[DEBUG]",
		Color = Color3.fromRGB(100, 149, 237), -- CornflowerBlue
		Icon = "‚ÑπÔ∏è",
	},
	[Logger.Levels.INFO] = {
		Prefix = "[INFO]",
		Color = Color3.fromRGB(50, 205, 50), -- LimeGreen
		Icon = "‚úÖ",
	},
	[Logger.Levels.WARN] = {
		Prefix = "[WARN]",
		Color = Color3.fromRGB(255, 215, 0), -- Gold
		Icon = "‚ö†Ô∏è",
	},
	[Logger.Levels.ERROR] = {
		Prefix = "[ERROR]",
		Color = Color3.fromRGB(255, 69, 0), -- OrangeRed
		Icon = "‚ùå",
	},
	[Logger.Levels.FATAL] = {
		Prefix = "[FATAL]",
		Color = Color3.fromRGB(255, 0, 0), -- Red
		Icon = "üíÄ",
	},
}

-- –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
function Logger.new(name)
	local self = setmetatable({}, Logger)

	self.name = name or "Logger"
	self.logHistory = {}
	self.maxHistory = 100
	self.minLevel = 0

	return self
end

-- –ë–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
function Logger:log(level: number, message: string, ...)

	if level < self.minLevel then
		return
	end

	-- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
	local formattedMsg = string.format(message, ...)
	local time = os.date("%H:%M:%S", os.time())
	local template = MessageTemplates[level] or MessageTemplates[Logger.Levels.INFO]

	-- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞
	local logEntry = string.format("%s [%s] [%s] %s: %s", template.Icon, time, self.name, template.Prefix, formattedMsg)

	-- –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
	if game:GetService("RunService"):IsStudio() then
		-- –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –¥–ª—è Roblox Studio
		local studioMessage =
			string.format("%s [%s] [%s] %s: %s", template.Icon, time, self.name, template.Prefix, formattedMsg)

		-- –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã –≤—ã–≤–æ–¥–∞ –¥–ª—è Studio
		if level >= Logger.Levels.ERROR then
			warn(studioMessage) -- –û—à–∏–±–∫–∏ –≤—ã–≤–æ–¥—è—Ç—Å—è —á–µ—Ä–µ–∑ warn (–∂–µ–ª—Ç—ã–π)
		else
			print(studioMessage)
		end

		-- –î–ª—è Studio –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–º —á–µ—Ä–µ–∑ —Å–≤–æ–π—Å—Ç–≤–∞ (–Ω–µ –≤—Å–µ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç)
		if level == Logger.Levels.DEBUG then
			print("\\[[DEBUG]\\] " .. formattedMsg)
		end
	else
		-- –ü—Ä–æ—Å—Ç–æ–π –≤—ã–≤–æ–¥ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
		print(logEntry)
	end

	-- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
	table.insert(self.logHistory, {
		message = logEntry,
		level = level,
		time = os.time(),
	})

	-- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏
	if #self.logHistory > self.maxHistory then
		table.remove(self.logHistory, 1)
	end

	return logEntry
end

-- –ú–µ—Ç–æ–¥—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
function Logger:debug(message, ...)
	return self:log(Logger.Levels.DEBUG, message, ...)
end
function Logger:info(message, ...)
	return self:log(Logger.Levels.INFO, message, ...)
end
function Logger:warn(message, ...)
	return self:log(Logger.Levels.WARN, message, ...)
end
function Logger:error(message, ...)
	return self:log(Logger.Levels.ERROR, message, ...)
end
function Logger:fatal(message, ...)
	return self:log(Logger.Levels.FATAL, message, ...)
end

-- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
function Logger:getHistory()
	return self.logHistory
end

function Logger:clearHistory()
	self.logHistory = {}
end

export type LoggerType = typeof(Logger)

return Logger
